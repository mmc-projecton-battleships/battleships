C51 COMPILER V9.55   BATTLESHIPS                                                           06/25/2019 11:22:59 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE BATTLESHIPS
OBJECT MODULE PLACED IN battleships.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe battleships.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------//
   2          //User_Interface_Functions.c
   3          //----------------------------------------------------------------------------
   4          //  Copyright (C) 2016 BRAUDE COLLEGE  
   5          //  Electronics & Elictrical Engineering Department
   6          //  All rights reserved.
   7          //  Owner               :  Dr. Fadil Tareef
   8          //  FILE NAME   :  User_Interface_Functions.c 
   9          //  DATE         :  23 DEC 2016
  10          //  TARGET MCU   :  C8051F020
  11          //  DESCRIPTION  :  This file contains LCD and KEPAD Interface Functions Implementation.
  12          //                                      P1 is used for the control signals, P1.0 = E, P1.1 = RW, P1.2 = RS, output only
  13          //                                      P2 is used for data: P2.7 is read to get the status of the LCD (BF)
  14          //                                      P2 must be configured as bidirectional (open-drain) 
  15          //                                      and set to FF (or at least 80) before reading the status of P2.7
  16          //                                      P3 is used for KEPAD interface.
  17          //                                      P3.0-P3.3 connected to the COLUMNS of the KEPAD, input pins.
  18          //                                      P3.4-P3.7 connected to the ROWS of the KEPAD, output pins.
  19          //                                
  20          //      NOTES: This file used in the LCD.c file.
  21          //                 This file updated for Keil C compiler and C8051F020.
  22          //-----------------------------------------------------------------------------
  23          
  24          //#include "C8051F020.h"                  // Include register definition file.
  25          #include "User_Interface_def.h"
  26          #include "battleships.h"
*** ERROR C132 IN LINE 34 OF battleships.h: 'get_data': not in formal parameter list
*** ERROR C132 IN LINE 35 OF battleships.h: 'screen_map_two': not in formal parameter list
*** ERROR C132 IN LINE 36 OF battleships.h: '_screen_end': not in formal parameter list
*** ERROR C132 IN LINE 37 OF battleships.h: 'end': not in formal parameter list
  27          //----------------------------- related Functions --------------------------------
  28          
  29          void main()
  30          {
*** ERROR C132 IN LINE 30 OF battleships.c: 'main': not in formal parameter list
*** ERROR C141 IN LINE 30 OF battleships.c: syntax error near '{'
  31                  Init_Device();
*** ERROR C132 IN LINE 31 OF battleships.c: 'Init_Device': not in formal parameter list
  32                  Init_LCD();
*** ERROR C132 IN LINE 32 OF battleships.c: 'Init_LCD': not in formal parameter list
  33                  Init_map();
*** ERROR C132 IN LINE 33 OF battleships.c: 'Init_map': not in formal parameter list
  34                  Main_loop();
*** ERROR C132 IN LINE 34 OF battleships.c: 'Main_loop': not in formal parameter list
  35                  
  36                  
  37          
  38          }
*** ERROR C141 IN LINE 38 OF battleships.c: syntax error near '}'
  39          void Main_loop()
  40          {
  41   1              while(1)
  42   1              {
  43   2                      switch(screen_num)
  44   2                      {
C51 COMPILER V9.55   BATTLESHIPS                                                           06/25/2019 11:22:59 PAGE 2   

  45   3                              case 0:
  46   3                                      start_screen();
  47   3                                      switch_difficulty();
  48   3                                      counting_screen();
  49   3                                      break;
  50   3                              case 1:
  51   3                                      screen_data();
  52   3                                      break;
  53   3                              case 2:
  54   3                                      screen_map_one();
  55   3                                      break;
  56   3                              case 3:
  57   3                                      screen_map_two();
  58   3                                      break;
  59   3                              default://bug - > print that there is a problem. ask the player to reset the game. "Error screen".
  60   3                                      break;
  61   3                      }
  62   2              }
  63   1      }
  64          
  65          
  66          void screen_data()
  67          {
  68   1              get_data();
  69   1              print_current_status();
  70   1              key=GET_KEY();
  71   1              if(key==5)
  72   1              {
  73   2                      screen_num=2;
  74   2              }
  75   1              
  76   1      }
  77          
  78          void print_current_status()
  79          {
  80   1              LCD_CLRS(); // clears the display
  81   1              LCD_BF();// wait untill the LCD is no longer busy
  82   1              LCD_CMD(0x02);// move the cursor home
  83   1              LCD_BF();// wait untill the LCD is no longer busy
  84   1              LCD_MSG("Time left: ");
  85   1              LCD_BF();// wait untill the LCD is no longer busy
  86   1              LCD_MSG(*game_timer);
  87   1              LCD_BF();// wait untill the LCD is no longer busy
  88   1              LCD_GOTO(0x40);
  89   1              LCD_BF();// wait untill the LCD is no longer busy
  90   1              LCD_MSG("Misses left: ");
  91   1              LCD_BF();// wait untill the LCD is no longer busy
  92   1              LCD_MSG(char(miss_cnt));
  93   1              LCD_BF();// wait untill the LCD is no longer busy
  94   1      }
  95          
  96          void get_data()
  97          {
  98   1              //send 'd', wait for input 4 times
  99   1      }
 100          
 101          //check if there is avaible data.
 102          void check_input_uart()
 103          {
 104   1              if (!RI0)
 105   1                      return;
 106   1              recieved_note = SBUF0;
C51 COMPILER V9.55   BATTLESHIPS                                                           06/25/2019 11:22:59 PAGE 3   

 107   1              RI0=0;
 108   1      }
 109          //wait for data.
 110          void wait_for_input()
 111          {
 112   1              while(!RI0);
 113   1              recieved_note = SBUF0;
 114   1              RI0=0;
 115   1      }
 116          //send data to ARM.
 117          void send_char(char c)
 118          {
 119   1              TI0 = 0;
 120   1              SBUF0=  c;
 121   1              while(!TI0);
 122   1              TI0= 0;
 123   1              //#devnote: add :check if the arm got the tarsmission
 124   1      }
 125          //wait for "secs" seconds.
 126          //#devnote: need to be fixed. there is a new oscilator frequency.
 127          void delay(int secs)
 128          {
 129   1              int pu = secs/(6*10^(-6));
 130   1              int t0 = 0xFFFF-pu;
 131   1              TL0=(t0%(0xFF));
 132   1              TH0=(t0/(0xFF));
 133   1              TR0 = 1;        //START COUNTING
 134   1              while(!TF0);    //DELAY UNTIL OF
 135   1      }
 136          
 137          void Init_LCD()
 138          {
 139   1              LCD_BF(); // wait untill the LCD is no longer busy
 140   1              LCD_INIT();// initialize the LCD to 8 bit mode
 141   1              LCD_BF();// wait untill the LCD is no longer busy
 142   1              LCD_CMD(0x06); // curser moves from left to right
 143   1              LCD_BF();// wait untill the LCD is no longer busy
 144   1              LCD_CLRS(); // clears the display
 145   1              LCD_BF();// wait untill the LCD is no longer busy
 146   1              LCD_CMD(0x02);// move the cursor home
 147   1              LCD_BF();// wait untill the LCD is no longer busy
 148   1              
 149   1      }
 150          
 151          void start_screen()
 152          {
 153   1              LCD_CLRS(); // clears the display
 154   1              LCD_BF();// wait untill the LCD is no longer busy
 155   1              LCD_MSG("BattleShips!");
 156   1              LCD_BF();// wait untill the LCD is no longer busy
 157   1              delay(2);
 158   1              LCD_CLRS(); // clears the display
 159   1              LCD_BF();// wait untill the LCD is no longer busy
 160   1      }
 161          
 162          
 163          void switch_difficulty()
 164          {
 165   1              char key;
 166   1              LCD_CMD(0x02);// move the cursor home
 167   1              LCD_BF();// wait untill the LCD is no longer busy
 168   1              LCD_MSG("Please choose");
C51 COMPILER V9.55   BATTLESHIPS                                                           06/25/2019 11:22:59 PAGE 4   

 169   1              LCD_BF();// wait untill the LCD is no longer busy
 170   1              LCD_GOTO(0x40);
 171   1              LCD_BF();// wait untill the LCD is no longer busy
 172   1              LCD_MSG("difficulty:");
 173   1              LCD_BF();// wait untill the LCD is no longer busy
 174   1              PRESSED_KEY();  //wait until pressing
 175   1              key = GET_KEY();        //save the key pressed
 176   1              KEY_RELEASE();          //wait until releasing
 177   1              LCD_DAT(ASCII_CONV(key));
 178   1              LCD_BF();// wait untill the LCD is no longer busy
 179   1              set_difficulty(key);
 180   1              delay(2);
 181   1              //#devnote: add :check if difficulty
 182   1      }
 183          
 184          void set_difficulty(char difficulty)
 185          {
 186   1              //#devnote: add :check if difficulty is legit. if not, ask the player to re-enter difficulty level
 187   1              send_char(difficulty);//let the arm decide what difficulty parameters should be.
 188   1      }
 189          
 190          void counting_screen()
 191          {
 192   1              LCD_CLRS(); // clears the display
 193   1              LCD_BF();// wait untill the LCD is no longer busy
 194   1              LCD_MSG("3");
 195   1              LCD_BF();// wait untill the LCD is no longer busy
 196   1              delay(1);
 197   1              LCD_CLRS(); // clears the display
 198   1              LCD_BF();// wait untill the LCD is no longer busy
 199   1              LCD_MSG("2");
 200   1              LCD_BF();// wait untill the LCD is no longer busy
 201   1              delay(1);
 202   1              LCD_CLRS(); // clears the display
 203   1              LCD_BF();// wait untill the LCD is no longer busy
 204   1              LCD_MSG("1");
 205   1              LCD_BF();// wait untill the LCD is no longer busy
 206   1              delay(1);
 207   1              LCD_CLRS(); // clears the display
 208   1              LCD_BF();// wait untill the LCD is no longer busy
 209   1              LCD_MSG("GO!");
 210   1              LCD_BF();// wait untill the LCD is no longer busy
 211   1              delay(1);
 212   1              LCD_CLRS(); // clears the display
 213   1              LCD_BF();// wait untill the LCD is no longer busy
 214   1              send_char('s');//indicate the ARM the game starts now.
 215   1              screen_num=1;//change to screen_data.
 216   1      }
 217          
 218          void Reset_isr() interrupt 1
 219          {
 220   1              game_timer = "00:00";
 221   1              miss_cnt=0;
 222   1              TI0 = 0;
 223   1              send_char('r'); //sending "Reset" to ARM.
 224   1              Init_LCD();
 225   1              KEPAD_INIT();   // initialize the keypad
 226   1              screen_num=0;
 227   1              recieved_note=0;
 228   1              cursor =0;
 229   1              Init_map();
 230   1              Main_loop();//#devnote: when will the interrupt end ? there is a bug !.
C51 COMPILER V9.55   BATTLESHIPS                                                           06/25/2019 11:22:59 PAGE 5   

 231   1      }
 232          
 233          void screen_map_one()
 234          {
 235   1              char key=0; //used to read input from the user keyboard.
 236   1              LCD_BF();// wait untill the LCD is no longer busy
 237   1              LCD_CLRS(); // clears the display
 238   1              LCD_BF();// wait untill the LCD is no longer busy
 239   1              //---------> move cursor to right place
 240   1              if(cursor>15)
 241   1                      LCD_GOTO(cursor + 0x30);
 242   1              else
 243   1                      LCD_GOTO(cursor);
 244   1              LCD_BF();// wait untill the LCD is no longer busy
 245   1              print_map(2);
 246   1              while(1) // kind of a main loop
 247   1              {
 248   2                      key = GET_KEY();
 249   2                      if(key!=0) 
 250   2                      {
 251   3                              switch(key)
 252   3                              {
 253   4                              case 1://move cursor up. may chagnge the screen.
 254   4                                      if (cursor<=15)
 255   4                                      {
 256   5                                              screen_num=1;//change to screen_data.
 257   5                                              return;
 258   5                                      }
 259   4                                      cursor-=16;//go to upper line
 260   4                                      LCD_GOTO(cursor);
 261   4                                      break;
 262   4                              case 4://move cursor left.
 263   4                                      if (cursor==0 || cursor==16)//can't go behind the screeen.
 264   4                                              break;
 265   4                                      cursor--;
 266   4                                      LCD_BF();
 267   4                                      //------------>move left
 268   4                                      if(cursor>15)
 269   4                                              LCD_GOTO(cursor + 0x30);
 270   4                                      else
 271   4                                              LCD_GOTO(cursor);
 272   4                                      break;
 273   4                              case 5://move cursor down. may change screen.
 274   4                                      if (cursor>=16)
 275   4                                      {
 276   5                                              cursor-=16;
 277   5                                              screen_num=3;//go to bottom half of the map.
 278   5                                              return;
 279   5                                      }
 280   4                                      cursor+=16;
 281   4                                      LCD_BF();
 282   4                                      LCD_GOTO(cursor + 0x30);
 283   4                                      break;
 284   4                              case 6://move cursor right.
 285   4                                      if (cursor==15 || cursor==31)//can't go behind the screeen.
 286   4                                              break;
 287   4                                      cursor++;
 288   4                                      LCD_BF();
 289   4                                      //------------>move right
 290   4                                      if(cursor>15)
 291   4                                              LCD_GOTO(cursor + 0x30);
 292   4                                      else
C51 COMPILER V9.55   BATTLESHIPS                                                           06/25/2019 11:22:59 PAGE 6   

 293   4                                              LCD_GOTO(cursor);
 294   4                                      break;
 295   4                              }
 296   3                      }
 297   2                      key=0;
 298   2                      if(SW4 == 0)//if switch is pressed
 299   2                      {
 300   3                              send_char((char)cursor);//send to ARM the hit location.
 301   3                              wait_for_input();//wait for ARM to respond.
 302   3                              if(recieved_note == 'h')//if hit
 303   3                              {
 304   4                                      recieved_note=0;
 305   4                                      map[cursor/16][cursor%16] = 'X';
 306   4                                      //print 'X'
 307   4                              }
 308   3                              else if(recieved_note == 'm')//if miss
 309   3                              {
 310   4                                      recieved_note=0;
 311   4                                      map[cursor/16][cursor%16] = 'O';
 312   4                                      //print 'O'
 313   4                              }
 314   3                              else if(recieved_note == 'p')
 315   3                              {
 316   4                                      recieved_note=0;
 317   4                                      //#devnote:get 2 more locations and print the fallen ship
 318   4                              }
 319   3                      }
 320   2              }
 321   1              
 322   1      
 323   1      }
 324          //fill map with blank boxes.
 325          void Init_map()
 326          {
 327   1              int i=0;
 328   1              int j=0;
 329   1              for(j=0;j<4;j++)
 330   1              {
 331   2                      for(i=0;i<16;i++)
 332   2                      {
 333   3                              map[j][i]= 219;//219 represent unchecked box
 334   3                      }
 335   2              }       
 336   1              
 337   1      }
 338          //print the map by the right screen. 
 339          //screen 2 = upper half. 
 340          //sceren 3 = bottom half.
 341          void print_map(int screen)
 342          {
 343   1              int i;
 344   1              if (screen==2 || screen==3)
 345   1              {
 346   2                      
 347   2                              for (i=0;i<16;i++)
 348   2                              {
 349   3                                      LCD_BF();
 350   3                                      LCD_DAT(map[(0+2*(screen/3))][i]);
 351   3                                      LCD_BF();
 352   3                              }
 353   2                              LCD_GOTO(0x40);
 354   2                              for (i=0;i<16;i++)
C51 COMPILER V9.55   BATTLESHIPS                                                           06/25/2019 11:22:59 PAGE 7   

 355   2                              {
 356   3                                      LCD_BF();
 357   3                                      LCD_DAT(map[1+2*(screen/3)][i]);
 358   3                                      LCD_BF();
 359   3                              }
 360   2              }
 361   1      }
 362          
 363          
 364          void end() interrupt 0
 365          {
 366   1              wait_for_input();
 367   1              screen_end(recieved_note);
 368   1      }
 369          
 370          void screen_end(char win)
 371          {
 372   1              if (win=='w')
 373   1              {
 374   2                      //#devnote:ending winner screen.
 375   2                      //#devnote:request the player to hit "reset".
 376   2              }
 377   1              else if(win=='l')
 378   1              {
 379   2                      //#devnote:ending winner screen.
 380   2                      //#devnote:request the player to hit "reset".
 381   2              }
 382   1              else
 383   1              {
 384   2                      //#devnote: not sure. we can call screen_end again or raise screen_error and ask for a 'reset'.
 385   2              }
 386   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  11 ERROR(S)
