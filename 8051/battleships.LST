C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/23/2019 16:07:04 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BATTLESHIPS
OBJECT MODULE PLACED IN battleships.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe battleships.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------//
   2          //User_Interface_Functions.c
   3          //----------------------------------------------------------------------------
   4          //  Copyright (C) 2016 BRAUDE COLLEGE  
   5          //  Electronics & Elictrical Engineering Department
   6          //  All rights reserved.
   7          //  Owner               :  Dr. Fadil Tareef
   8          //  FILE NAME   :  User_Interface_Functions.c 
   9          //  DATE         :  23 DEC 2016
  10          //  TARGET MCU   :  C8051F020
  11          //  DESCRIPTION  :  This file contains LCD and KEPAD Interface Functions Implementation.
  12          //                                      P1 is used for the control signals, P1.0 = E, P1.1 = RW, P1.2 = RS, output only
  13          //                                      P2 is used for data: P2.7 is read to get the status of the LCD (BF)
  14          //                                      P2 must be configured as bidirectional (open-drain) 
  15          //                                      and set to FF (or at least 80) before reading the status of P2.7
  16          //                                      P3 is used for KEPAD interface.
  17          //                                      P3.0-P3.3 connected to the COLUMNS of the KEPAD, input pins.
  18          //                                      P3.4-P3.7 connected to the ROWS of the KEPAD, output pins.
  19          //                                
  20          //      NOTES: This file used in the LCD.c file.
  21          //                 This file updated for Keil C compiler and C8051F020.
  22          //-----------------------------------------------------------------------------
  23          
  24          //#include "C8051F020.h"                  // Include register definition file.
  25          #include "User_Interface_def.h"
  26          #include "battleships.h"
  27          //----------------------------- related Functions --------------------------------
  28          char recieved_note=0;
  29          char map[4][16];
  30          void main()
  31          {
  32   1              //char key=0;
  33   1              Init_Device();
  34   1              Init_LCD();
  35   1              Init_map();
  36   1              screen_map_one();
  37   1              while(1)
  38   1              {
  39   2                      
  40   2              /*      key = GET_KEY();        //save the key pressed
  41   2                      
  42   2                      LCD_BF();               //wait until releasing
  43   2                      if(key!=0) send_char(ASCII_CONV(key));
  44   2                      key=0;
  45   2                      check_input_uart0();
  46   2                      if (recieved_note)
  47   2                      {
  48   2                              LCD_DAT(recieved_note);
  49   2                      }
  50   2                      recieved_note=0;*/
  51   2              }
  52   1              
  53   1      
  54   1      }
  55          
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/23/2019 16:07:04 PAGE 2   

  56          
  57          
  58          void check_input_uart0()
  59          {
  60   1              if (!RI0)
  61   1                      return;
  62   1              recieved_note = SBUF0;
  63   1              RI0=0;
  64   1      }
  65          void send_char(char c)
  66          {
  67   1              TI0 = 0;
  68   1              SBUF0=  c;
  69   1              while(!TI0);
  70   1              TI0= 0;
  71   1      }
  72          void delay(int secs)
  73          {
  74   1              int pu = secs/(6*10^(-6));
  75   1              int t0 = 0xFFFF-pu;
  76   1              TL0=(t0%(0xFF));
  77   1              TH0=(t0/(0xFF));
  78   1              TR0 = 1;        //START COUNTING
  79   1              while(!TF0);    //DELAY UNTIL OF
  80   1      }
  81          
  82          void Init_LCD()
  83          {
  84   1              LCD_BF(); // wait untill the LCD is no longer busy
  85   1              LCD_INIT();// initialize the LCD to 8 bit mode
  86   1              LCD_BF();// wait untill the LCD is no longer busy
  87   1              LCD_CMD(0x06); // curser moves from left to right
  88   1              LCD_BF();// wait untill the LCD is no longer busy
  89   1              LCD_CLRS(); // clears the display
  90   1              LCD_BF();// wait untill the LCD is no longer busy
  91   1              LCD_CMD(0x02);// move the cursor home
  92   1              LCD_BF();// wait untill the LCD is no longer busy
  93   1              
  94   1      }
  95          
  96          void start_screen()
  97          {
  98   1              LCD_CLRS(); // clears the display
  99   1              LCD_BF();// wait untill the LCD is no longer busy
 100   1              LCD_MSG("BattleShips!");
 101   1              LCD_BF();// wait untill the LCD is no longer busy
 102   1              delay(2);
 103   1              LCD_CLRS(); // clears the display
 104   1              LCD_BF();// wait untill the LCD is no longer busy
 105   1      }
 106          
 107          
 108          void switch_difficulty()
 109          {
 110   1              char key;
 111   1              LCD_CMD(0x02);// move the cursor home
 112   1              LCD_BF();// wait untill the LCD is no longer busy
 113   1              LCD_MSG("Please choose");
 114   1              LCD_BF();// wait untill the LCD is no longer busy
 115   1              LCD_GOTO(0x40);
 116   1              LCD_BF();// wait untill the LCD is no longer busy
 117   1              LCD_MSG("difficulty:");
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/23/2019 16:07:04 PAGE 3   

 118   1              LCD_BF();// wait untill the LCD is no longer busy
 119   1              PRESSED_KEY();  //wait until pressing
 120   1              key = GET_KEY();        //save the key pressed
 121   1              KEY_RELEASE();          //wait until releasing
 122   1              LCD_DAT(ASCII_CONV(key));
 123   1              LCD_BF();// wait untill the LCD is no longer busy
 124   1              delay(2);
 125   1              set_difficulty(key);
 126   1      }
 127          
 128          void set_difficulty(char difficulty)
 129          {
 130   1              switch (difficulty)
 131   1                {
 132   2                case '1': 
 133   2                      {
 134   3                              game_timer ="03:00";
 135   3                              miss_cnt = 25;
 136   3                              break;
 137   3                      }
 138   2                case '2':
 139   2                      {
 140   3                              game_timer = "02:00";
 141   3                              miss_cnt = 20;
 142   3                              break;
 143   3                      }
 144   2                case '3':
 145   2                      {
 146   3                              game_timer = "01:00";
 147   3                              miss_cnt = 15;
 148   3                              break;
 149   3                      }
 150   2                }
 151   1      }
 152          
 153          void counting_screen()
 154          {
 155   1              LCD_CLRS(); // clears the display
 156   1              LCD_BF();// wait untill the LCD is no longer busy
 157   1              LCD_MSG("3");
 158   1              LCD_BF();// wait untill the LCD is no longer busy
 159   1              delay(1);
 160   1              LCD_CLRS(); // clears the display
 161   1              LCD_BF();// wait untill the LCD is no longer busy
 162   1              LCD_MSG("2");
 163   1              LCD_BF();// wait untill the LCD is no longer busy
 164   1              delay(1);
 165   1              LCD_CLRS(); // clears the display
 166   1              LCD_BF();// wait untill the LCD is no longer busy
 167   1              LCD_MSG("1");
 168   1              LCD_BF();// wait untill the LCD is no longer busy
 169   1              delay(1);
 170   1              LCD_CLRS(); // clears the display
 171   1              LCD_BF();// wait untill the LCD is no longer busy
 172   1              LCD_MSG("GO!");
 173   1              LCD_BF();// wait untill the LCD is no longer busy
 174   1              delay(1);
 175   1              LCD_CLRS(); // clears the display
 176   1              LCD_BF();// wait untill the LCD is no longer busy
 177   1      }
 178          
 179          void Reset_isr() interrupt 0
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/23/2019 16:07:04 PAGE 4   

 180          {
 181   1              game_timer = "00:00";
 182   1              miss_cnt=0;
 183   1              TI0 = 0;
 184   1              send_char('r'); //sending "Reset" to ARM.
 185   1              Init_LCD();
 186   1              KEPAD_INIT();   // initialize the keypad
 187   1              start_screen();
 188   1              switch_difficulty();
 189   1              counting_screen();
 190   1              Main_loop();
 191   1      }
 192          
 193          /*
 194          void UART0_ISR(void) interrupt 4
 195          {
 196                  if (RI0==1)
 197                  {
 198                          char note;
 199                          note = SBUF0;
 200                          LCD_BF();               //wait until releasing
 201                          LCD_DAT(note);
 202                          LCD_BF();
 203                          RI0=0;
 204                  }
 205                  
 206          }*/
 207          
 208          
 209          void screen_map_one()
 210          {
 211   1              LCD_BF();// wait untill the LCD is no longer busy
 212   1              LCD_CLRS(); // clears the display
 213   1              LCD_BF();// wait untill the LCD is no longer busy
 214   1              LCD_CMD(0x02);// move the cursor home
 215   1              LCD_BF();// wait untill the LCD is no longer busy
 216   1              print_map(4);
 217   1      
 218   1      
 219   1      }
 220          
 221          void Init_map()
 222          {
 223   1              int i=0;
 224   1              int j=0;
 225   1              for(j=0;j<4;j++)
 226   1              {
 227   2                      for(i=0;i<16;i++)
 228   2                      {
 229   3                              map[j][i]= 219+j;//219 represent unchecked box
 230   3                      }
 231   2              }       
 232   1              
 233   1      }
 234          
 235          void print_map(int screen)
 236          {
 237   1              int i;
 238   1              if (screen==3 || screen==4)
 239   1              {
 240   2                      
 241   2                              for (i=0;i<16;i++)
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/23/2019 16:07:04 PAGE 5   

 242   2                              {
 243   3                                      LCD_BF();
 244   3                                      LCD_DAT(map[(0+(screen/4))][i]);
 245   3                                      LCD_BF();
 246   3                              }
 247   2                              LCD_GOTO(0x40);
 248   2                              for (i=0;i<16;i++)
 249   2                              {
 250   3                                      LCD_BF();
 251   3                                      LCD_DAT(map[1+(screen/4)][i]);
 252   3                                      LCD_BF();
 253   3                              }
 254   2              }
 255   1              
 256   1              
 257   1                              
 258   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    669    ----
   CONSTANT SIZE    =     73    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     70       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
