C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE BATTLESHIPS
OBJECT MODULE PLACED IN battleships.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe battleships.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------//
   2          //User_Interface_Functions.c
   3          //----------------------------------------------------------------------------
   4          //  Copyright (C) 2016 BRAUDE COLLEGE  
   5          //  Electronics & Elictrical Engineering Department
   6          //  All rights reserved.
   7          //  Owner               :  Dr. Fadil Tareef
   8          //  FILE NAME   :  User_Interface_Functions.c 
   9          //  DATE         :  23 DEC 2016
  10          //  TARGET MCU   :  C8051F020
  11          //  DESCRIPTION  :  This file contains LCD and KEPAD Interface Functions Implementation.
  12          //                                      P1 is used for the control signals, P1.0 = E, P1.1 = RW, P1.2 = RS, output only
  13          //                                      P2 is used for data: P2.7 is read to get the status of the LCD (BF)
  14          //                                      P2 must be configured as bidirectional (open-drain) 
  15          //                                      and set to FF (or at least 80) before reading the status of P2.7
  16          //                                      P3 is used for KEPAD interface.
  17          //                                      P3.0-P3.3 connected to the COLUMNS of the KEPAD, input pins.
  18          //                                      P3.4-P3.7 connected to the ROWS of the KEPAD, output pins.
  19          //                                
  20          //      NOTES: This file used in the LCD.c file.
  21          //                 This file updated for Keil C compiler and C8051F020.
  22          //-----------------------------------------------------------------------------
  23          
  24          //#include "C8051F020.h"                  // Include register definition file.
  25          #include "User_Interface_def.h"
  26          #include "battleships.h"
  27          //----------------------------- related Functions --------------------------------
  28          char first = 't';
  29          void main()
  30          {
  31   1      
  32   1              if (first=='f') send_char('r');//tell the ARM to Reset.
  33   1              first='f';
  34   1              Init_Device();
  35   1              Init_LCD();
  36   1              Init_map();
  37   1              Main_loop();
  38   1      }
  39          void Main_loop()
  40          {
  41   1              while(1)
  42   1              {
  43   2                      switch(screen_num)
  44   2                      {
  45   3                              case 0:
  46   3                                      //start
  47   3                                      start_screen();
  48   3                                      break;
  49   3                              case 1:
  50   3                                      //chose difficulty level
  51   3                                      switch_difficulty();
  52   3                                      break;
  53   3                              case 2:
  54   3                                      counting_screen();
  55   3                                      break;
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 2   

  56   3                              case 3:
  57   3                                      //show time and missiles left
  58   3                                      screen_data();                          
  59   3                                      break;
  60   3                              case 4:
  61   3                                      //upper half of map
  62   3                                      screen_map_one();
  63   3                                      break;
  64   3                              case 5:
  65   3                                      //lower half of map
  66   3                                      screen_map_two();
  67   3                                      break;
  68   3                              case 6:
  69   3                                      //end
  70   3                                      screen_end(w);
  71   3                                      break;
  72   3                              default://bug - > print that there is a problem. ask the player to reset the game. "Error screen".
  73   3                                      break;
  74   3                      }
  75   2              }
  76   1      }
  77          
  78          
  79          void screen_data()
  80          {
  81   1              char key=0;
  82   1              while(1)
  83   1              {
  84   2                      get_data();//get time and missiles left from ARM
  85   2                      if(w!=0)//if we lost\won
  86   2                      {
  87   3                      screen_num=6;//go to end
  88   3                      return;
  89   3                      }
  90   2                      print_current_status();//print time and missiles left
  91   2      
  92   2                      key=GET_KEY();
  93   2                      large_delay(130);
  94   2                      if(key==5)//if user asks to get down to the upper half of the map
  95   2                      {
  96   3                              screen_num=4;
  97   3                              return;
  98   3                      }
  99   2              }       
 100   1      }
 101          
 102          void print_current_status()
 103          {
 104   1              LCD_CLRS(); // clears the display
 105   1              LCD_BF();// wait untill the LCD is no longer busy
 106   1              LCD_CMD(0x02);// move the cursor home
 107   1              LCD_BF();// wait untill the LCD is no longer busy
 108   1              LCD_MSG("Time left: ");
 109   1              LCD_BF();// wait untill the LCD is no longer busy
 110   1              LCD_MSG(game_timer);
 111   1              LCD_BF();// wait untill the LCD is no longer busy
 112   1              LCD_GOTO(0x40);
 113   1              LCD_BF();// wait untill the LCD is no longer busy
 114   1              LCD_MSG("Misses left: ");
 115   1              LCD_BF();// wait untill the LCD is no longer busy
 116   1              LCD_DAT((miss_cnt/10)+'0');
 117   1              LCD_BF();
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 3   

 118   1              LCD_DAT((miss_cnt%10)+'0');
 119   1              LCD_BF();// wait untill the LCD is no longer busy
 120   1      }
 121          
 122          void get_data()
 123          {
 124   1              char s[3];
 125   1              short i;
 126   1              //send 'd', wait for input 4 times
 127   1              check_input_uart();
 128   1              if(recieved_note=='w'||recieved_note=='l')//in case a"lose" or "win" message came
 129   1              {
 130   2                      w=recieved_note;
 131   2                      screen_num=6;
 132   2                      return;
 133   2              }
 134   1              send_char('d');//ask for data
 135   1              for(i=0;i<3;i++)//get data
 136   1              {
 137   2                      wait_for_input();
 138   2                      if(recieved_note=='w'||recieved_note=='l')//if lose or win message came
 139   2                      {
 140   3                              w=recieved_note;
 141   3                              screen_num=6;//change to ending screen
 142   3                              return;
 143   3                      }       
 144   2                      s[i]=recieved_note;
 145   2              }
 146   1              //set time and missiles left
 147   1              recieved_note=0;
 148   1              game_timer[0]=(s[0]/10) + '0';
 149   1              game_timer[1]=(s[0]%10) + '0';
 150   1              game_timer[2]=':';
 151   1              game_timer[3]=(s[1]/10) + '0';
 152   1              game_timer[4]=(s[1]%10) + '0';
 153   1              miss_cnt = s[2];
 154   1      }
 155          
 156          //check if there is avaible data.
 157          void check_input_uart()
 158          {
 159   1              if (!RI0)
 160   1                      return;
 161   1              recieved_note = SBUF0;
 162   1              RI0=0;
 163   1      }
 164          //wait for data.
 165          void wait_for_input()
 166          {
 167   1              while(!RI0);
 168   1              recieved_note = SBUF0;
 169   1              RI0=0;
 170   1      }
 171          //send data to ARM.
 172          void send_char(char c)
 173          {
 174   1              TI0 = 0;
 175   1              SBUF0=  c;
 176   1              while(!TI0);
 177   1              TI0= 0;
 178   1      }
 179          //wait for "secs" seconds.
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 4   

 180          void delay(int secs)
 181          {
 182   1              short j=0;
 183   1              short i=0;
 184   1              for (;j<secs;j++)
 185   1              {
 186   2                      for (;i<28;i++)
 187   2                      {
 188   3                              TR0 = 1;        //START COUNTING
 189   3                              while(!TF0);    //DELAY
 190   3                              TF0=0;
 191   3                      }
 192   2              }
 193   1      }
 194          
 195          void Init_LCD()
 196          {
 197   1              red=0;
 198   1              green=0;
 199   1              yellow=0;
 200   1              blue=0;
 201   1              LCD_BF(); // wait untill the LCD is no longer busy
 202   1              LCD_INIT();// initialize the LCD to 8 bit mode
 203   1              LCD_BF();// wait untill the LCD is no longer busy
 204   1              LCD_CMD(0x06); // curser moves from left to right
 205   1              LCD_BF();// wait untill the LCD is no longer busy
 206   1              LCD_CLRS(); // clears the display
 207   1              LCD_BF();// wait untill the LCD is no longer busy
 208   1              LCD_CMD(0x02);// move the cursor home
 209   1              LCD_BF();// wait untill the LCD is no longer busy
 210   1              
 211   1      }
 212          
 213          void start_screen()
 214          {
 215   1              LCD_CLRS(); // clears the display
 216   1              LCD_BF();// wait untill the LCD is no longer busy
 217   1              LCD_MSG("BattleShips!");
 218   1              LCD_BF();// wait untill the LCD is no longer busy
 219   1              delay(2);
 220   1              LCD_CLRS(); // clears the display
 221   1              LCD_BF();// wait untill the LCD is no longer busy
 222   1              screen_num=1;
 223   1      }
 224          
 225          
 226          void switch_difficulty()
 227          {
 228   1              char key;
 229   1              LCD_CLRS(); // clears the display
 230   1              LCD_CMD(0x02);// move the cursor home
 231   1              LCD_BF();// wait untill the LCD is no longer busy
 232   1              LCD_MSG("Please choose");
 233   1              LCD_BF();// wait untill the LCD is no longer busy
 234   1              LCD_GOTO(0x40);
 235   1              LCD_BF();// wait untill the LCD is no longer busy
 236   1              LCD_MSG("difficulty:");
 237   1              LCD_BF();// wait untill the LCD is no longer busy
 238   1              PRESSED_KEY();  //wait until pressing
 239   1              key = GET_KEY();        //save the key pressed
 240   1              KEY_RELEASE();          //wait until releasing
 241   1              LCD_DAT(ASCII_CONV(key));
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 5   

 242   1              LCD_BF();// wait untill the LCD is no longer busy
 243   1              screen_num=2;
 244   1              set_difficulty(key+1);
 245   1              delay(2);
 246   1      }
 247          
 248          void set_difficulty(char difficulty)
 249          {
 250   1              //difficulty level range : 1-3 (on keyboard). 
 251   1              if (difficulty>3)
 252   1              {
 253   2                      delay(1);
 254   2                      screen_num=1;
 255   2                      LCD_CLRS(); // clears the display
 256   2                      LCD_CMD(0x02);// move the cursor home
 257   2                      LCD_BF();// wait untill the LCD is no longer busy
 258   2                      LCD_MSG("range: 1-3");
 259   2                      LCD_BF();// wait untill the LCD is no longer busy
 260   2                      delay(1);
 261   2                      return;
 262   2              }
 263   1              send_char(difficulty);//let the arm decide what difficulty parameters should be.
 264   1      }
 265          
 266          void counting_screen()
 267          {
 268   1              wait_for_input();
 269   1              recieved_note=0;
 270   1              LCD_CLRS(); // clears the display
 271   1              LCD_BF();// wait untill the LCD is no longer busy
 272   1              LCD_MSG("3");
 273   1              LCD_BF();// wait untill the LCD is no longer busy
 274   1              delay(1);
 275   1              LCD_CLRS(); // clears the display
 276   1              LCD_BF();// wait untill the LCD is no longer busy
 277   1              LCD_MSG("2");
 278   1              LCD_BF();// wait untill the LCD is no longer busy
 279   1              delay(1);
 280   1              LCD_CLRS(); // clears the display
 281   1              LCD_BF();// wait untill the LCD is no longer busy
 282   1              LCD_MSG("1");
 283   1              LCD_BF();// wait untill the LCD is no longer busy
 284   1              delay(1);
 285   1              LCD_CLRS(); // clears the display
 286   1              LCD_BF();// wait untill the LCD is no longer busy
 287   1              LCD_MSG("GO!");
 288   1              LCD_BF();// wait untill the LCD is no longer busy
 289   1              delay(1);
 290   1              LCD_CLRS(); // clears the display
 291   1              LCD_BF();// wait untill the LCD is no longer busy
 292   1              send_char('s');//indicate the ARM the game starts now.
 293   1              screen_num=3;//change to screen_data.
 294   1      }
 295          //upper half of the map
 296          void screen_map_one()
 297          {
 298   1              char key=0; //used to read input from the user keyboard.
 299   1              LCD_BF();// wait untill the LCD is no longer busy
 300   1              LCD_CLRS(); // clears the display
 301   1              LCD_BF();// wait untill the LCD is no longer busy
 302   1              LCD_GOTO(0x00);
 303   1              LCD_BF();
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 6   

 304   1              print_map(screen_num);
 305   1              //---------> move cursor to right place
 306   1              if(cursor>15)
 307   1                      LCD_GOTO(cursor + 0x30);
 308   1              else
 309   1                      LCD_GOTO(cursor);
 310   1              LCD_BF();// wait untill the LCD is no longer busy
 311   1              while(1) // kind of a main loop
 312   1              {
 313   2                      key = GET_KEY();
 314   2                      if(key!=0) 
 315   2                      {
 316   3                              red=0;
 317   3                              green=0;
 318   3                              yellow=0;
 319   3                              blue=0;
 320   3                              switch(key)
 321   3                              {
 322   4                              case 1://move cursor up. may chagnge the screen.
 323   4                                      if (cursor<=15)
 324   4                                      {
 325   5                                              screen_num=3;//change to screen_data.
 326   5                                              return;
 327   5                                      }
 328   4                                      cursor-=16;//go to upper line
 329   4                                      LCD_GOTO(cursor);
 330   4                                      break;
 331   4                              case 4://move cursor left.
 332   4                                      if (cursor==0 || cursor==16)//can't go behind the screeen.
 333   4                                              break;
 334   4                                      cursor--;
 335   4                                      LCD_BF();
 336   4                                      //------------>move left
 337   4                                      if(cursor>15)
 338   4                                              LCD_GOTO(cursor + 0x30);
 339   4                                      else
 340   4                                              LCD_GOTO(cursor);
 341   4                                      break;
 342   4                              case 5://move cursor down. may change screen.
 343   4                                      if (cursor>=16)
 344   4                                      {
 345   5                                              cursor-=16;
 346   5                                              screen_num=5;//go to bottom half of the map.
 347   5                                              return;
 348   5                                      }
 349   4                                      cursor+=16;
 350   4                                      LCD_BF();
 351   4                                      LCD_GOTO(cursor + 0x30);
 352   4                                      break;
 353   4                              case 6://move cursor right.
 354   4                                      if (cursor==15 || cursor==31)//can't go behind the screeen.
 355   4                                              break;
 356   4                                      cursor++;
 357   4                                      LCD_BF();
 358   4                                      //------------>move right
 359   4                                      if(cursor>15)
 360   4                                              LCD_GOTO(cursor + 0x30);
 361   4                                      else
 362   4                                              LCD_GOTO(cursor);
 363   4                                      break;
 364   4                              }
 365   3                      }
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 7   

 366   2                      key=0;
 367   2                      //if a win or lose message came
 368   2                      check_input_uart();
 369   2                      if(recieved_note =='w'||recieved_note=='l')
 370   2                              {
 371   3                                      w=recieved_note;
 372   3                                      screen_num=6;
 373   3                                      return;
 374   3                              }
 375   2                      //hit
 376   2                      if(SW4 == 0)
 377   2                      {
 378   3                              if(map[cursor/16][cursor%16] =='X'||map[cursor/16][cursor%16]=='O') return;
 379   3                              //independently because long binary sentence arn't working well.
 380   3                              if(map[cursor/16][cursor%16]=='S')return;
 381   3                              red=0;
 382   3                              green=0;
 383   3                              yellow=0;
 384   3                              blue=0;
 385   3                              send_char((char)cursor+1);//send to ARM the hit location.
 386   3                              wait_for_input();//wait for ARM to respond.
 387   3                              if(recieved_note == 'h')//if hit
 388   3                              {
 389   4                                      green=1;
 390   4                                      recieved_note=0;
 391   4                                      map[cursor/16][cursor%16] = 'X';
 392   4                                      LCD_BF();
 393   4                                      LCD_DAT('X');
 394   4                                      LCD_BF();
 395   4                                      LCD_CMD(0x10);
 396   4                              }
 397   3                              else if(recieved_note == 'm')//if miss
 398   3                              {
 399   4                                      red=1;
 400   4                                      recieved_note=0;
 401   4                                      map[cursor/16][cursor%16] = 'O';
 402   4                                      LCD_BF();
 403   4                                      LCD_DAT('O');
 404   4                                      LCD_BF();
 405   4                                      LCD_CMD(0x10);
 406   4                              }
 407   3                              else if(recieved_note == 'p')//if falles ship
 408   3                              {
 409   4                                      red=1;
 410   4                                      green=1;
 411   4                                      yellow=1;
 412   4                                      blue=1;
 413   4                                      recieved_note=0;
 414   4                                      update_fallen_ship();
 415   4                                      return;
 416   4                              }
 417   3                              else if(recieved_note =='w'||recieved_note=='l')//if win or lose message came
 418   3                              {
 419   4                                      w=recieved_note;
 420   4                                      screen_num=6;
 421   4                                      return;
 422   4                              }
 423   3                              while(SW4 == 0);//wait untill switch4 in released.
 424   3                      }
 425   2              }
 426   1      }
 427          //lower half of the map
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 8   

 428          void screen_map_two()
 429          {
 430   1              char key=0; //used to read input from the user keyboard.
 431   1              LCD_BF();// wait untill the LCD is no longer busy
 432   1              LCD_CLRS(); // clears the display
 433   1              LCD_BF();// wait untill the LCD is no longer busy
 434   1              LCD_GOTO(0x00);
 435   1              LCD_BF();
 436   1              print_map(screen_num);
 437   1              //---------> move cursor to right place
 438   1              if(cursor>15)
 439   1                      LCD_GOTO(cursor + 0x30);
 440   1              else
 441   1                      LCD_GOTO(cursor);
 442   1              LCD_BF();// wait untill the LCD is no longer busy
 443   1              while(1) // kind of a main loop
 444   1              {
 445   2                      key = GET_KEY();
 446   2                      if(key!=0) 
 447   2                      {
 448   3                              red=0;
 449   3                              green=0;
 450   3                              yellow=0;
 451   3                              blue=0;
 452   3                              switch(key)
 453   3                              {
 454   4                              case 1://move cursor up. may chagnge the screen.
 455   4                                      if (cursor<=15)
 456   4                                      {
 457   5                                              screen_num=4;//change to screen_data.
 458   5                                              cursor+=16;
 459   5                                              return;
 460   5                                      }
 461   4                                      cursor-=16;//go to upper line
 462   4                                      LCD_GOTO(cursor);
 463   4                                      break;
 464   4                              case 4://move cursor left.
 465   4                                      if (cursor==0 || cursor==16)//can't go behind the screeen.
 466   4                                              break;
 467   4                                      cursor--;
 468   4                                      LCD_BF();
 469   4                                      //------------>move left
 470   4                                      if(cursor>15)
 471   4                                              LCD_GOTO(cursor + 0x30);
 472   4                                      else
 473   4                                              LCD_GOTO(cursor);
 474   4                                      break;
 475   4                              case 5://move cursor down. may change screen.
 476   4                                      if (cursor>=16)
 477   4                                      {
 478   5                                              return;
 479   5                                      }
 480   4                                      cursor+=16;
 481   4                                      LCD_BF();
 482   4                                      LCD_GOTO(cursor + 0x30);
 483   4                                      break;
 484   4                              case 6://move cursor right.
 485   4                                      if (cursor==15 || cursor==31)//can't go behind the screeen.
 486   4                                              break;
 487   4                                      cursor++;
 488   4                                      LCD_BF();
 489   4                                      //------------>move right
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 9   

 490   4                                      if(cursor>15)
 491   4                                              LCD_GOTO(cursor + 0x30);
 492   4                                      else
 493   4                                              LCD_GOTO(cursor);
 494   4                                      break;
 495   4                              }
 496   3                      }
 497   2                      key=0;
 498   2                      check_input_uart();//if a win or lose message came
 499   2                      if(recieved_note =='w'||recieved_note=='l')
 500   2                              {
 501   3                                      w=recieved_note;
 502   3                                      screen_num=6;
 503   3                                      return;
 504   3                              }
 505   2                      //hit
 506   2                      if(SW4 == 0)
 507   2                      {
 508   3                              if(map[(cursor/16)+2][cursor%16] =='X'||map[(cursor/16)+2][cursor%16]=='O') return;
 509   3                              if(map[(cursor/16)+2][cursor%16]=='S')return;
 510   3                              red=0;
 511   3                              green=0;
 512   3                              yellow=0;
 513   3                              blue=0;
 514   3                              send_char((char)cursor+33);//send to ARM the hit location. +32 offset indicate 2' screen
 515   3                              wait_for_input();//wait for ARM to respond.
 516   3                              if(recieved_note == 'h')//if hit
 517   3                              {
 518   4                                      green=1;
 519   4                                      recieved_note=0;
 520   4                                      map[cursor/16+2][cursor%16] = 'X';
 521   4                                      LCD_BF();
 522   4                                      LCD_DAT('X');
 523   4                                      LCD_BF();
 524   4                                      LCD_CMD(0x10);
 525   4                              }
 526   3                              else if(recieved_note == 'm')//if miss
 527   3                              {
 528   4                                      red=1;
 529   4                                      recieved_note=0;
 530   4                                      map[cursor/16+2][cursor%16] = 'O';
 531   4                                      LCD_BF();
 532   4                                      LCD_DAT('O');
 533   4                                      LCD_BF();
 534   4                                      LCD_CMD(0x10);
 535   4                              }
 536   3                              else if(recieved_note == 'p')//falles ship
 537   3                              {
 538   4                                      red=1;
 539   4                                      green=1;
 540   4                                      yellow=1;
 541   4                                      blue=1;
 542   4                                      recieved_note=0;
 543   4                                      update_fallen_ship();
 544   4                                      return;
 545   4                              }
 546   3                              else if(recieved_note =='w'||recieved_note=='l')//win\lose message came
 547   3                              {
 548   4                                      w=recieved_note;
 549   4                                      screen_num=6;
 550   4                                      return;
 551   4                              }
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 10  

 552   3                              while(SW4 == 0);
 553   3                      }
 554   2              }
 555   1      }
 556          //get 3 pos of the falles ship from the uart.
 557          void update_fallen_ship()
 558          {
 559   1              char pos[3];
 560   1              int i=0;
 561   1              for(;i<3;i++)//get cordinates of the fallen ship
 562   1              {
 563   2                      wait_for_input();
 564   2                      pos[i]=recieved_note;
 565   2              }
 566   1              //update on map
 567   1              recieved_note=0;
 568   1              map[pos[0]/16][pos[0]%16] = 83;// 83 = S
 569   1              if(pos[1]!='e')
 570   1                      map[pos[1]/16][pos[1]%16] = 83;
 571   1              if(pos[2]!='e')
 572   1                      map[pos[2]/16][pos[2]%16] = 83;
 573   1      }
 574          
 575          
 576          
 577          //fill map with blanks .
 578          void Init_map()
 579          {
 580   1              short i=0;
 581   1              short j=0;
 582   1              for(j=0;j<4;j++)
 583   1              {
 584   2                      for(i=0;i<16;i++)
 585   2                      {
 586   3                              map[j][i]= 45;//45 represent "unchecked"  = '-';
 587   3                      }
 588   2              }       
 589   1              
 590   1      }
 591          //print the map by the right screen. 
 592          //screen 2 = upper half. 
 593          //sceren 3 = bottom half.
 594          void print_map(int screen)
 595          {
 596   1              short i;
 597   1              if (screen==4 || screen==5)
 598   1              {
 599   2                      
 600   2                              for (i=0;i<16;i++)
 601   2                              {
 602   3                                      LCD_BF();
 603   3                                      LCD_DAT(map[(0+2*(screen/5))][i]);
 604   3                                      LCD_BF();
 605   3                              }
 606   2                              LCD_GOTO(0x40);
 607   2                              for (i=0;i<16;i++)
 608   2                              {
 609   3                                      LCD_BF();
 610   3                                      LCD_DAT(map[1+2*(screen/5)][i]);
 611   3                                      LCD_BF();
 612   3                              }
 613   2              }
C51 COMPILER V9.55   BATTLESHIPS                                                           06/29/2019 15:00:05 PAGE 11  

 614   1      }
 615          
 616          
 617          void screen_end(char win)
 618          {
 619   1              char* message;
 620   1              if (win=='w')
 621   1              {
 622   2                      message = "WINNER!";
 623   2              }
 624   1              else if(win=='l')
 625   1              {
 626   2                      message = "LOOSER!";
 627   2              }
 628   1              else
 629   1              {
 630   2                      message = "ERROR!";
 631   2              }
 632   1              LCD_CLRS(); // clears the display
 633   1              LCD_BF();// wait untill the LCD is no longer busy
 634   1              LCD_CMD(0x02);// move the cursor home
 635   1              LCD_BF();// wait untill the LCD is no longer busy
 636   1              LCD_MSG(message);
 637   1              LCD_BF();// wait untill the LCD is no longer busy
 638   1              delay(4);//wait 4 seconds.
 639   1              LCD_CLRS();
 640   1              LCD_BF();// wait untill the LCD is no longer busy
 641   1              LCD_MSG("please press");
 642   1              LCD_BF();
 643   1              LCD_GOTO(0x40);
 644   1              LCD_BF();
 645   1              LCD_MSG("reset button!.");
 646   1              LCD_BF();// wait untill the LCD is no longer busy
 647   1              while(1);
 648   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2279    ----
   CONSTANT SIZE    =    137    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     78      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
