C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE BATTLESHIPS
OBJECT MODULE PLACED IN battleships.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe battleships.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------//
   2          //User_Interface_Functions.c
   3          //----------------------------------------------------------------------------
   4          //  Copyright (C) 2016 BRAUDE COLLEGE  
   5          //  Electronics & Elictrical Engineering Department
   6          //  All rights reserved.
   7          //  Owner               :  Dr. Fadil Tareef
   8          //  FILE NAME   :  User_Interface_Functions.c 
   9          //  DATE         :  23 DEC 2016
  10          //  TARGET MCU   :  C8051F020
  11          //  DESCRIPTION  :  This file contains LCD and KEPAD Interface Functions Implementation.
  12          //                                      P1 is used for the control signals, P1.0 = E, P1.1 = RW, P1.2 = RS, output only
  13          //                                      P2 is used for data: P2.7 is read to get the status of the LCD (BF)
  14          //                                      P2 must be configured as bidirectional (open-drain) 
  15          //                                      and set to FF (or at least 80) before reading the status of P2.7
  16          //                                      P3 is used for KEPAD interface.
  17          //                                      P3.0-P3.3 connected to the COLUMNS of the KEPAD, input pins.
  18          //                                      P3.4-P3.7 connected to the ROWS of the KEPAD, output pins.
  19          //                                
  20          //      NOTES: This file used in the LCD.c file.
  21          //                 This file updated for Keil C compiler and C8051F020.
  22          //-----------------------------------------------------------------------------
  23          
  24          //#include "C8051F020.h"                  // Include register definition file.
  25          #include "User_Interface_def.h"
  26          #include "battleships.h"
  27          //----------------------------- related Functions --------------------------------
  28          void main()
  29          {
  30   1              Init_Device();
  31   1              send_char('r'); //tell the ARM to Reset.
  32   1              Init_LCD();
  33   1              Init_map();             //set "map" values to '-' on upper hald and '+' on lower half.
  34   1              Main_loop();
  35   1      }
  36          void Main_loop()
  37          {
  38   1              while(1)
  39   1              {
  40   2                      switch(screen_num)
  41   2                      {
  42   3                              case 0:
  43   3                                      //start
  44   3                                      start_screen();
  45   3                                      break;
  46   3                              case 1:
  47   3                                      //chose difficulty level
  48   3                                      switch_difficulty();
  49   3                                      break;
  50   3                              case 2:
  51   3                                      counting_screen();
  52   3                                      break;
  53   3                              case 3:
  54   3                                      //show time and missiles left
  55   3                                      screen_data();                          
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 2   

  56   3                                      break;
  57   3                              case 4:
  58   3                                      //upper half of map
  59   3                                      screen_map_one();
  60   3                                      break;
  61   3                              case 5:
  62   3                                      //lower half of map
  63   3                                      screen_map_two();
  64   3                                      break;
  65   3                              case 6:
  66   3                                      //end
  67   3                                      screen_end(w);
  68   3                                      break;
  69   3                              default:
  70   3                                      //bug - > print that there is a problem. ask the player to reset the game. "Bug screen".
  71   3                                      bug();
  72   3                                      break;
  73   3                      }
  74   2              }
  75   1      }
  76          
  77          
  78          void screen_data()
  79          {
  80   1              char key=0;                                     //used to get input from the user
  81   1              while(1)                                        //while(1) beacause we want to allways "refresh" the data
  82   1              {
  83   2                      get_data();                             //get time and missiles left from ARM
  84   2                      if(w!=0)                                //if we lost\won
  85   2                      {
  86   3                      screen_num=6;                   //go to end
  87   3                      return;                                 //exit the loop
  88   3                      }
  89   2                      print_current_status(); //print time and missiles left
  90   2                      key=GET_KEY();          //get input from user.
  91   2                      large_delay(130);               //used to decrease the "Frame Rate".
  92   2                      if(key==5)                              //if user asks to get down to the upper half of the map
  93   2                      {
  94   3                              screen_num=4;           //chose "upper half of map" screen
  95   3                              return;                         //exit the loop
  96   3                      }
  97   2              }       
  98   1      }
  99          
 100          void print_current_status()
 101          {
 102   1              LCD_CLRS();                             // clears the display
 103   1              LCD_BF();                               // wait untill the LCD is no longer busy
 104   1              LCD_CMD(0x02);                  // move the cursor home
 105   1              LCD_BF();                               // wait untill the LCD is no longer busy
 106   1              LCD_MSG("Time left: "); //print "Time left: "
 107   1              LCD_BF();                               // wait untill the LCD is no longer busy
 108   1              LCD_MSG(game_timer);    // print the time left
 109   1              LCD_BF();                               // wait untill the LCD is no longer busy
 110   1              LCD_GOTO(0x40);                 //go to second line
 111   1              LCD_BF();                               // wait untill the LCD is no longer busy
 112   1              LCD_MSG("Missiles:  "); //print "Missiles:  "
 113   1              LCD_BF();                               // wait untill the LCD is no longer busy
 114   1              LCD_DAT((miss_cnt/10)+'0');     //print first digit of "miss_cnt"
 115   1              LCD_BF();
 116   1              LCD_DAT((miss_cnt%10)+'0');     //print second digit of "miss_cnt"
 117   1              LCD_BF();                               // wait untill the LCD is no longer busy
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 3   

 118   1      }
 119          
 120          void get_data()
 121          {
 122   1              char s[3];
 123   1              short i;
 124   1              //send 'd'and wait for input of 3 chars
 125   1              check_input_uart();
 126   1              check_end();//in case the input was a 'win\lose' indication
 127   1                      if(w!=0)
 128   1                              return;
 129   1              send_char('d');//ask for data
 130   1              for(i=0;i<3;i++)//get data of 3 chars
 131   1              {
 132   2                      wait_for_input();
 133   2                      check_end();//check if the was a 'win\lose' indication
 134   2                      if(w!=0)
 135   2                              return;
 136   2                      s[i]=recieved_note;//insert input to s
 137   2              }
 138   1              //set time and missiles left
 139   1              recieved_note=0;
 140   1              game_timer[0]=(s[0]/10) + '0';
 141   1              game_timer[1]=(s[0]%10) + '0';
 142   1              game_timer[2]=':';
 143   1              game_timer[3]=(s[1]/10) + '0';
 144   1              game_timer[4]=(s[1]%10) + '0';
 145   1              miss_cnt = s[2];
 146   1      }
 147          
 148          //check if there is avaible data.
 149          void check_input_uart()
 150          {
 151   1              if (!RI0)
 152   1                      return;
 153   1              recieved_note = SBUF0;
 154   1              RI0=0;
 155   1      }
 156          //wait for data.
 157          void wait_for_input()
 158          {
 159   1              while(!RI0);
 160   1              recieved_note = SBUF0;
 161   1              RI0=0;
 162   1      }
 163          //send data to ARM.
 164          void send_char(char c)
 165          {
 166   1              TI0 = 0;
 167   1              SBUF0=  c;
 168   1              while(!TI0);
 169   1              TI0= 0;
 170   1      }
 171          //wait for "secs" seconds.
 172          void delay(int secs)
 173          {
 174   1              short j=0;
 175   1              short i=0;
 176   1              for (;j<secs;j++)
 177   1              {
 178   2                      for (;i<28;i++)
 179   2                      {
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 4   

 180   3                              TR0 = 1;        //START COUNTING
 181   3                              while(!TF0);    //DELAY
 182   3                              TF0=0;
 183   3                      }
 184   2              }
 185   1      }
 186          
 187          void Init_LCD()
 188          {
 189   1              red=0;
 190   1              green=0;
 191   1              yellow=0;
 192   1              blue=0;
 193   1              LCD_BF(); // wait untill the LCD is no longer busy
 194   1              LCD_INIT();// initialize the LCD to 8 bit mode
 195   1              LCD_BF();// wait untill the LCD is no longer busy
 196   1              LCD_CMD(0x06); // curser moves from left to right
 197   1              LCD_BF();// wait untill the LCD is no longer busy
 198   1              LCD_CLRS(); // clears the display
 199   1              LCD_BF();// wait untill the LCD is no longer busy
 200   1              LCD_CMD(0x02);// move the cursor home
 201   1              LCD_BF();// wait untill the LCD is no longer busy
 202   1              
 203   1      }
 204          
 205          void start_screen()
 206          {
 207   1              LCD_CLRS(); // clears the display
 208   1              LCD_BF();// wait untill the LCD is no longer busy
 209   1              LCD_MSG("BattleShips!");
 210   1              LCD_BF();// wait untill the LCD is no longer busy
 211   1              delay(2);
 212   1              LCD_CLRS(); // clears the display
 213   1              LCD_BF();// wait untill the LCD is no longer busy
 214   1              screen_num=1;
 215   1      }
 216          
 217          
 218          void switch_difficulty()
 219          {
 220   1              char key;
 221   1              LCD_CLRS(); // clears the display
 222   1              LCD_CMD(0x02);// move the cursor home
 223   1              LCD_BF();// wait untill the LCD is no longer busy
 224   1              LCD_MSG("Please choose");
 225   1              LCD_BF();// wait untill the LCD is no longer busy
 226   1              LCD_GOTO(0x40);
 227   1              LCD_BF();// wait untill the LCD is no longer busy
 228   1              LCD_MSG("difficulty:");
 229   1              LCD_BF();// wait untill the LCD is no longer busy
 230   1              PRESSED_KEY();  //wait until pressing
 231   1              key = GET_KEY();        //save the key pressed
 232   1              KEY_RELEASE();          //wait until releasing
 233   1              LCD_DAT(ASCII_CONV(key));
 234   1              LCD_BF();// wait untill the LCD is no longer busy
 235   1              screen_num=2;
 236   1              set_difficulty(key+1);
 237   1              delay(2);
 238   1      }
 239          
 240          void set_difficulty(char difficulty)
 241          {
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 5   

 242   1              //difficulty level range : 1-3 (on keyboard). 
 243   1              if (difficulty>3)
 244   1              {
 245   2                      delay(1);
 246   2                      screen_num=1;
 247   2                      LCD_CLRS(); // clears the display
 248   2                      LCD_CMD(0x02);// move the cursor home
 249   2                      LCD_BF();// wait untill the LCD is no longer busy
 250   2                      LCD_MSG("range: 1-3");
 251   2                      LCD_BF();// wait untill the LCD is no longer busy
 252   2                      delay(1);
 253   2                      return;
 254   2              }
 255   1              send_char(difficulty);//let the arm decide what difficulty parameters should be.
 256   1      }
 257          
 258          void counting_screen()
 259          {
 260   1              int i = 3;
 261   1              wait_for_input();//wait for ARM to be ready
 262   1              recieved_note=0;
 263   1              for(;i>=1;i--)
 264   1              {
 265   2                      LCD_CLRS(); // clears the display
 266   2                      LCD_BF();// wait untill the LCD is no longer busy
 267   2                      LCD_MSG(i + '0');
*** ERROR C214 IN LINE 267 OF battleships.c: illegal pointer conversion
 268   2                      LCD_BF();// wait untill the LCD is no longer busy
 269   2                      delay(1);
 270   2              }
 271   1              
 272   1              LCD_CLRS(); // clears the display
 273   1              LCD_BF();// wait untill the LCD is no longer busy
 274   1              LCD_MSG("2");
 275   1              LCD_BF();// wait untill the LCD is no longer busy
 276   1              delay(1);
 277   1              LCD_CLRS(); // clears the display
 278   1              LCD_BF();// wait untill the LCD is no longer busy
 279   1              LCD_MSG("1");
 280   1              LCD_BF();// wait untill the LCD is no longer busy
 281   1              delay(1);
 282   1              LCD_CLRS(); // clears the display
 283   1              LCD_BF();// wait untill the LCD is no longer busy
 284   1              LCD_MSG("GO!");
 285   1              LCD_BF();// wait untill the LCD is no longer busy
 286   1              delay(1);
 287   1              LCD_CLRS(); // clears the display
 288   1              LCD_BF();// wait untill the LCD is no longer busy
 289   1              send_char('s');//indicate the ARM the game starts now.
 290   1              screen_num=3;//change to screen_data.
 291   1      }
 292          //upper half of the map
 293          void screen_map_one()
 294          {
 295   1              char key=0; //used to read input from the user keyboard.
 296   1              LCD_BF();// wait untill the LCD is no longer busy
 297   1              LCD_CLRS(); // clears the display
 298   1              LCD_BF();// wait untill the LCD is no longer busy
 299   1              LCD_GOTO(0x00);
 300   1              LCD_BF();
 301   1              print_map(screen_num);
 302   1              //---------> move cursor to right place
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 6   

 303   1              if(cursor>15)
 304   1                      LCD_GOTO(cursor + 0x30);
 305   1              else
 306   1                      LCD_GOTO(cursor);
 307   1              LCD_BF();// wait untill the LCD is no longer busy
 308   1              while(1) // kind of a main loop
 309   1              {
 310   2                      LCD_CMD(0x0E);
 311   2                      key = GET_KEY();
 312   2                      if(key!=0) 
 313   2                      {
 314   3                              red=0;
 315   3                              green=0;
 316   3                              yellow=0;
 317   3                              blue=0;
 318   3                              switch(key)
 319   3                              {
 320   4                              case 1://move cursor up. may chagnge the screen.
 321   4                                      if (cursor<=15)
 322   4                                      {
 323   5                                              screen_num=3;//change to screen_data.
 324   5                                              return;
 325   5                                      }
 326   4                                      cursor-=16;//go to upper line
 327   4                                      LCD_GOTO(cursor);
 328   4                                      break;
 329   4                              case 4://move cursor left.
 330   4                                      if (cursor==0 || cursor==16)//can't go behind the screeen.
 331   4                                      {
 332   5                                              cursor+=15;
 333   5                                              LCD_BF();
 334   5                                              LCD_GOTO(cursor+3*(cursor/16));
 335   5                                              break;
 336   5                                      }
 337   4                                      cursor--;
 338   4                                      LCD_BF();
 339   4                                      //------------>move left
 340   4                                      if(cursor>15)
 341   4                                              LCD_GOTO(cursor + 0x30);
 342   4                                      else
 343   4                                              LCD_GOTO(cursor);
 344   4                                      break;
 345   4                              case 5://move cursor down. may change screen.
 346   4                                      if (cursor>=16)
 347   4                                      {
 348   5                                              cursor-=16;
 349   5                                              screen_num=5;//go to bottom half of the map.
 350   5                                              return;
 351   5                                      }
 352   4                                      cursor+=16;
 353   4                                      LCD_BF();
 354   4                                      LCD_GOTO(cursor + 0x30);
 355   4                                      break;
 356   4                              case 6://move cursor right.
 357   4                                      if (cursor==15 || cursor==31)//can't go behind the screeen.
 358   4                                      {
 359   5                                              cursor-=15;
 360   5                                              LCD_BF();
 361   5                                              LCD_GOTO(cursor+3*(cursor/16));
 362   5                                              break;
 363   5                                      }
 364   4                                      cursor++;
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 7   

 365   4                                      LCD_BF();
 366   4                                      //------------>move right
 367   4                                      if(cursor>15)
 368   4                                              LCD_GOTO(cursor + 0x30);
 369   4                                      else
 370   4                                              LCD_GOTO(cursor);
 371   4                                      break;
 372   4                              }
 373   3                      }
 374   2                      key=0;
 375   2                      //if a win or lose message came
 376   2                      check_input_uart();
 377   2                      check_end();
 378   2                      if(w!=0)
 379   2                              return;
 380   2                      //hit
 381   2                      if(SW4 == 0)
 382   2                      {
 383   3                              if(map[cursor/16][cursor%16] =='X'||map[cursor/16][cursor%16]=='O') return;
 384   3                              //independently because long binary sentence arn't working well.
 385   3                              if(map[cursor/16][cursor%16]=='*')return;
 386   3                              red=0;
 387   3                              green=0;
 388   3                              yellow=0;
 389   3                              blue=0;
 390   3                              send_char((char)cursor+1);//send to ARM the hit location.
 391   3                              wait_for_input();//wait for ARM to respond.
 392   3                              if(recieved_note == 'h')//if hit
 393   3                              {
 394   4                                      green=1;
 395   4                                      recieved_note=0;
 396   4                                      map[cursor/16][cursor%16] = 'X';
 397   4                                      LCD_BF();
 398   4                                      LCD_DAT('X');
 399   4                                      LCD_BF();
 400   4                                      LCD_CMD(0x10);
 401   4                              }
 402   3                              else if(recieved_note == 'm')//if miss
 403   3                              {
 404   4                                      red=1;
 405   4                                      recieved_note=0;
 406   4                                      map[cursor/16][cursor%16] = 'O';
 407   4                                      LCD_BF();
 408   4                                      LCD_DAT('O');
 409   4                                      LCD_BF();
 410   4                                      LCD_CMD(0x10);
 411   4                              }
 412   3                              else if(recieved_note == 'p')//if falles ship
 413   3                              {
 414   4                                      red=1;
 415   4                                      green=1;
 416   4                                      yellow=1;
 417   4                                      blue=1;
 418   4                                      recieved_note=0;
 419   4                                      update_fallen_ship();
 420   4                                      return;
 421   4                              }
 422   3                              check_input_uart();
 423   3                              check_end();
 424   3                              if(w!=0)
 425   3                                      return;
 426   3                              while(SW4 == 0);//wait untill switch4 in released.
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 8   

 427   3                      }
 428   2              }
 429   1      }
 430          //lower half of the map
 431          void screen_map_two()
 432          {
 433   1              char key=0; //used to read input from the user keyboard.
 434   1              LCD_BF();// wait untill the LCD is no longer busy
 435   1              LCD_CLRS(); // clears the display
 436   1              LCD_BF();// wait untill the LCD is no longer busy
 437   1              LCD_GOTO(0x00);
 438   1              LCD_BF();
 439   1              print_map(screen_num);
 440   1              //---------> move cursor to right place
 441   1              if(cursor>15)
 442   1                      LCD_GOTO(cursor + 0x30);
 443   1              else
 444   1                      LCD_GOTO(cursor);
 445   1              LCD_BF();// wait untill the LCD is no longer busy
 446   1              while(1) // kind of a main loop
 447   1              {
 448   2                      LCD_CMD(0x0E);
 449   2                      key = GET_KEY();
 450   2                      if(key!=0) 
 451   2                      {
 452   3                              red=0;
 453   3                              green=0;
 454   3                              yellow=0;
 455   3                              blue=0;
 456   3                              switch(key)
 457   3                              {
 458   4                              case 1://move cursor up. may chagnge the screen.
 459   4                                      if (cursor<=15)
 460   4                                      {
 461   5                                              screen_num=4;//change to screen_data.
 462   5                                              cursor+=16;
 463   5                                              return;
 464   5                                      }
 465   4                                      cursor-=16;//go to upper line
 466   4                                      LCD_GOTO(cursor);
 467   4                                      break;
 468   4                              case 4://move cursor left.
 469   4                                      if (cursor==0 || cursor==16)//can't go behind the screeen.
 470   4                                      {
 471   5                                              cursor+=15;
 472   5                                              LCD_BF();
 473   5                                              LCD_GOTO(cursor+3*(cursor/16));
 474   5                                              break;
 475   5                                      }
 476   4                                      cursor--;
 477   4                                      LCD_BF();
 478   4                                      //------------>move left
 479   4                                      if(cursor>15)
 480   4                                              LCD_GOTO(cursor + 0x30);
 481   4                                      else
 482   4                                              LCD_GOTO(cursor);
 483   4                                      break;
 484   4                              case 5://move cursor down. may change screen.
 485   4                                      if (cursor>=16)
 486   4                                      {
 487   5                                              return;
 488   5                                      }
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 9   

 489   4                                      cursor+=16;
 490   4                                      LCD_BF();
 491   4                                      LCD_GOTO(cursor + 0x30);
 492   4                                      break;
 493   4                              case 6://move cursor right.
 494   4                                      if (cursor==15 || cursor==31)//can't go behind the screeen.
 495   4                                      {
 496   5                                              cursor-=15;
 497   5                                              LCD_BF();
 498   5                                              LCD_GOTO(cursor+3*(cursor/16));
 499   5                                              break;
 500   5                                      }
 501   4                                      cursor++;
 502   4                                      LCD_BF();
 503   4                                      //------------>move right
 504   4                                      if(cursor>15)
 505   4                                              LCD_GOTO(cursor + 0x30);
 506   4                                      else
 507   4                                              LCD_GOTO(cursor);
 508   4                                      break;
 509   4                              }
 510   3                      }
 511   2                      key=0;
 512   2                      check_input_uart();//if a win or lose message came
 513   2                      check_end();
 514   2                      if(w!=0)
 515   2                              return;
 516   2                      //hit
 517   2                      if(SW4 == 0)
 518   2                      {
 519   3                              if(map[(cursor/16)+2][cursor%16] =='X'||map[(cursor/16)+2][cursor%16]=='O') return;
 520   3                              if(map[(cursor/16)+2][cursor%16]=='*')return;
 521   3                              red=0;
 522   3                              green=0;
 523   3                              yellow=0;
 524   3                              blue=0;
 525   3                              send_char((char)cursor+33);//send to ARM the hit location. +32 offset indicate 2' screen
 526   3                              wait_for_input();//wait for ARM to respond.
 527   3                              if(recieved_note == 'h')//if hit
 528   3                              {
 529   4                                      green=1;
 530   4                                      recieved_note=0;
 531   4                                      map[cursor/16+2][cursor%16] = 'X';
 532   4                                      LCD_BF();
 533   4                                      LCD_DAT('X');
 534   4                                      LCD_BF();
 535   4                                      LCD_CMD(0x10);
 536   4                              }
 537   3                              else if(recieved_note == 'm')//if miss
 538   3                              {
 539   4                                      red=1;
 540   4                                      recieved_note=0;
 541   4                                      map[cursor/16+2][cursor%16] = 'O';
 542   4                                      LCD_BF();
 543   4                                      LCD_DAT('O');
 544   4                                      LCD_BF();
 545   4                                      LCD_CMD(0x10);
 546   4                              }
 547   3                              else if(recieved_note == 'p')//falles ship
 548   3                              {
 549   4                                      red=1;
 550   4                                      green=1;
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 10  

 551   4                                      yellow=1;
 552   4                                      blue=1;
 553   4                                      recieved_note=0;
 554   4                                      update_fallen_ship();
 555   4                                      return;
 556   4                              }
 557   3                              check_input_uart();
 558   3                              check_end();
 559   3                              if(w!=0)
 560   3                                      return;
 561   3                              while(SW4 == 0);
 562   3                      }
 563   2              }
 564   1      }
 565          //get 3 pos of the falles ship from the uart.
 566          void update_fallen_ship()
 567          {
 568   1              char pos[3];
 569   1              int i=0;
 570   1              for(;i<3;i++)//get cordinates of the fallen ship
 571   1              {
 572   2                      wait_for_input();
 573   2                      check_end();
 574   2                      if(w!=0)
 575   2                              return;
 576   2                      pos[i]=recieved_note;
 577   2              }
 578   1              //update on map
 579   1              recieved_note=0;
 580   1              map[pos[0]/16][pos[0]%16] = '*';//'*' = fallen ship
 581   1              if(pos[1]!='e')
 582   1                      map[pos[1]/16][pos[1]%16] = '*';
 583   1              if(pos[2]!='e')
 584   1                      map[pos[2]/16][pos[2]%16] = '*';
 585   1      }
 586          
 587          
 588          void check_end()
 589          {
 590   1              if(recieved_note =='w'||recieved_note=='l')
 591   1              {
 592   2                      w=recieved_note;
 593   2                      screen_num=6;
 594   2                      return;
 595   2              }
 596   1      }
 597          
 598          //fill map with blanks .
 599          void Init_map()
 600          {
 601   1              short i=0;
 602   1              short j=0;
 603   1              for(j=0;j<2;j++)
 604   1              {
 605   2                      for(i=0;i<16;i++)
 606   2                      {
 607   3                              map[j][i]= '-';//represent "unchecked"  = '-' in uppper half map
 608   3                              map[j+2][i]='+';//represent "unchecked"  = '+' in bottom half map
 609   3                      }
 610   2              }
 611   1              
 612   1              
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 11  

 613   1      }
 614          //print the map by the right screen. 
 615          //screen 2 = upper half. 
 616          //sceren 3 = bottom half.
 617          void print_map(int screen)
 618          {
 619   1              short i;
 620   1              if (screen==4 || screen==5)
 621   1              {
 622   2                      
 623   2                              for (i=0;i<16;i++)
 624   2                              {
 625   3                                      LCD_BF();
 626   3                                      LCD_DAT(map[(0+2*(screen/5))][i]);
 627   3                                      LCD_BF();
 628   3                              }
 629   2                              LCD_GOTO(0x40);
 630   2                              for (i=0;i<16;i++)
 631   2                              {
 632   3                                      LCD_BF();
 633   3                                      LCD_DAT(map[1+2*(screen/5)][i]);
 634   3                                      LCD_BF();
 635   3                              }
 636   2              }
 637   1      }
 638          
 639          
 640          void screen_end(char win)
 641          {
 642   1              char* message;
 643   1              send_char('e');
 644   1              red=0;
 645   1              green=0;
 646   1              yellow=0;
 647   1              blue=0;
 648   1              if (win=='w')
 649   1              {
 650   2                      red=1;
 651   2                      green=1;
 652   2                      yellow=1;
 653   2                      blue=1;
 654   2                      message = "WINNER!";
 655   2              }
 656   1              else if(win=='l')
 657   1              {
 658   2                      message = "YOU LOSE!";
 659   2                      red=1;
 660   2              }
 661   1              else
 662   1              {
 663   2                      message = "ERROR!";
 664   2              }
 665   1              LCD_CLRS(); // clears the display
 666   1              LCD_BF();// wait untill the LCD is no longer busy
 667   1              LCD_CMD(0x02);// move the cursor home
 668   1              LCD_BF();// wait untill the LCD is no longer busy
 669   1              LCD_MSG(message);
 670   1              LCD_BF();// wait untill the LCD is no longer busy
 671   1              delay(4);//wait 4 seconds.
 672   1              LCD_CLRS();
 673   1              LCD_BF();// wait untill the LCD is no longer busy
 674   1              LCD_MSG("Please Press");
C51 COMPILER V9.55   BATTLESHIPS                                                           07/08/2019 15:55:49 PAGE 12  

 675   1              LCD_BF();
 676   1              LCD_GOTO(0x40);// go to second line
 677   1              LCD_BF();
 678   1              LCD_MSG("Reset Button!.");
 679   1              LCD_BF();// wait untill the LCD is no longer busy
 680   1              while(1);
 681   1      }
 682          
 683          
 684          void bug()
 685          {
 686   1              LCD_CLRS(); // clears the display
 687   1              LCD_BF();// wait untill the LCD is no longer busy
 688   1              LCD_CMD(0x02);// move the cursor home
 689   1              LCD_BF();// wait untill the LCD is no longer busy
 690   1              LCD_MSG("Error!");
 691   1              LCD_BF();// wait untill the LCD is no longer busy
 692   1              delay(4);//wait 4 seconds.
 693   1              LCD_CLRS();
 694   1              LCD_BF();// wait untill the LCD is no longer busy
 695   1              LCD_MSG("Please Press");
 696   1              LCD_BF();
 697   1              LCD_GOTO(0x40);// go to second line
 698   1              LCD_BF();
 699   1              LCD_MSG("Reset Button!.");
 700   1              LCD_BF();// wait untill the LCD is no longer busy
 701   1              while(1);
 702   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
