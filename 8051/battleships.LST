C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/25/2019 01:44:18 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BATTLESHIPS
OBJECT MODULE PLACED IN battleships.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe battleships.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------//
   2          //User_Interface_Functions.c
   3          //----------------------------------------------------------------------------
   4          //  Copyright (C) 2016 BRAUDE COLLEGE  
   5          //  Electronics & Elictrical Engineering Department
   6          //  All rights reserved.
   7          //  Owner               :  Dr. Fadil Tareef
   8          //  FILE NAME   :  User_Interface_Functions.c 
   9          //  DATE         :  23 DEC 2016
  10          //  TARGET MCU   :  C8051F020
  11          //  DESCRIPTION  :  This file contains LCD and KEPAD Interface Functions Implementation.
  12          //                                      P1 is used for the control signals, P1.0 = E, P1.1 = RW, P1.2 = RS, output only
  13          //                                      P2 is used for data: P2.7 is read to get the status of the LCD (BF)
  14          //                                      P2 must be configured as bidirectional (open-drain) 
  15          //                                      and set to FF (or at least 80) before reading the status of P2.7
  16          //                                      P3 is used for KEPAD interface.
  17          //                                      P3.0-P3.3 connected to the COLUMNS of the KEPAD, input pins.
  18          //                                      P3.4-P3.7 connected to the ROWS of the KEPAD, output pins.
  19          //                                
  20          //      NOTES: This file used in the LCD.c file.
  21          //                 This file updated for Keil C compiler and C8051F020.
  22          //-----------------------------------------------------------------------------
  23          
  24          //#include "C8051F020.h"                  // Include register definition file.
  25          #include "User_Interface_def.h"
  26          #include "battleships.h"
  27          //----------------------------- related Functions --------------------------------
  28          
  29          void main()
  30          {
  31   1              //char key=0;
  32   1              Init_Device();
  33   1              Init_LCD();
  34   1              Init_map();
  35   1              Main_loop();
  36   1              
  37   1              
  38   1      
  39   1      }
  40          void Main_loop()
  41          {
  42   1              while(1)
  43   1              {
  44   2                      switch(screen_num)
  45   2                      {
  46   3                              case 0:
  47   3                                      start_screen();
  48   3                                      switch_difficulty();
  49   3                                      counting_screen();
  50   3                                      break;
  51   3                              case 1:
  52   3                                      screen_data();
  53   3                                      break;
  54   3                              case 2:
  55   3                                      screen_map_one();
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/25/2019 01:44:18 PAGE 2   

  56   3                                      break;
  57   3                              case 3:
  58   3                                      screen_map_two();
  59   3                                      break;
  60   3                              default://bug - > print that there is a problem. ask the player to reset the game. "Error screen".
  61   3                                      break;
  62   3                      }
  63   2              }
  64   1      }
  65          
  66          //check if there is avaible data.
  67          void check_input_uart()
  68          {
  69   1              if (!RI0)
  70   1                      return;
  71   1              recieved_note = SBUF0;
  72   1              RI0=0;
  73   1      }
  74          //wait for data.
  75          void wait_for_input()
  76          {
  77   1              while(!RI0);
  78   1              recieved_note = SBUF0;
  79   1              RI0=0;
  80   1      }
  81          //send data to ARM.
  82          void send_char(char c)
  83          {
  84   1              TI0 = 0;
  85   1              SBUF0=  c;
  86   1              while(!TI0);
  87   1              TI0= 0;
  88   1      }
  89          //wait for "secs" seconds.
  90          //#devnote: need to be fixed. there is a new oscilator frequency.
  91          void delay(int secs)
  92          {
  93   1              int pu = secs/(6*10^(-6));
  94   1              int t0 = 0xFFFF-pu;
  95   1              TL0=(t0%(0xFF));
  96   1              TH0=(t0/(0xFF));
  97   1              TR0 = 1;        //START COUNTING
  98   1              while(!TF0);    //DELAY UNTIL OF
  99   1      }
 100          
 101          void Init_LCD()
 102          {
 103   1              LCD_BF(); // wait untill the LCD is no longer busy
 104   1              LCD_INIT();// initialize the LCD to 8 bit mode
 105   1              LCD_BF();// wait untill the LCD is no longer busy
 106   1              LCD_CMD(0x06); // curser moves from left to right
 107   1              LCD_BF();// wait untill the LCD is no longer busy
 108   1              LCD_CLRS(); // clears the display
 109   1              LCD_BF();// wait untill the LCD is no longer busy
 110   1              LCD_CMD(0x02);// move the cursor home
 111   1              LCD_BF();// wait untill the LCD is no longer busy
 112   1              
 113   1      }
 114          
 115          void start_screen()
 116          {
 117   1              LCD_CLRS(); // clears the display
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/25/2019 01:44:18 PAGE 3   

 118   1              LCD_BF();// wait untill the LCD is no longer busy
 119   1              LCD_MSG("BattleShips!");
 120   1              LCD_BF();// wait untill the LCD is no longer busy
 121   1              delay(2);
 122   1              LCD_CLRS(); // clears the display
 123   1              LCD_BF();// wait untill the LCD is no longer busy
 124   1      }
 125          
 126          
 127          void switch_difficulty()
 128          {
 129   1              char key;
 130   1              LCD_CMD(0x02);// move the cursor home
 131   1              LCD_BF();// wait untill the LCD is no longer busy
 132   1              LCD_MSG("Please choose");
 133   1              LCD_BF();// wait untill the LCD is no longer busy
 134   1              LCD_GOTO(0x40);
 135   1              LCD_BF();// wait untill the LCD is no longer busy
 136   1              LCD_MSG("difficulty:");
 137   1              LCD_BF();// wait untill the LCD is no longer busy
 138   1              PRESSED_KEY();  //wait until pressing
 139   1              key = GET_KEY();        //save the key pressed
 140   1              KEY_RELEASE();          //wait until releasing
 141   1              LCD_DAT(ASCII_CONV(key));
 142   1              LCD_BF();// wait untill the LCD is no longer busy
 143   1              set_difficulty(key);
 144   1              delay(2);
 145   1      }
 146          
 147          void set_difficulty(char difficulty)
 148          {
 149   1              //#devnote: add :check if difficulty is legit. if not, ask the player to re-enter difficulty level
 150   1              send_char(difficulty);//let the arm decide what difficulty parameters should be.
 151   1      }
 152          
 153          void counting_screen()
 154          {
 155   1              LCD_CLRS(); // clears the display
 156   1              LCD_BF();// wait untill the LCD is no longer busy
 157   1              LCD_MSG("3");
 158   1              LCD_BF();// wait untill the LCD is no longer busy
 159   1              delay(1);
 160   1              LCD_CLRS(); // clears the display
 161   1              LCD_BF();// wait untill the LCD is no longer busy
 162   1              LCD_MSG("2");
 163   1              LCD_BF();// wait untill the LCD is no longer busy
 164   1              delay(1);
 165   1              LCD_CLRS(); // clears the display
 166   1              LCD_BF();// wait untill the LCD is no longer busy
 167   1              LCD_MSG("1");
 168   1              LCD_BF();// wait untill the LCD is no longer busy
 169   1              delay(1);
 170   1              LCD_CLRS(); // clears the display
 171   1              LCD_BF();// wait untill the LCD is no longer busy
 172   1              LCD_MSG("GO!");
 173   1              LCD_BF();// wait untill the LCD is no longer busy
 174   1              delay(1);
 175   1              LCD_CLRS(); // clears the display
 176   1              LCD_BF();// wait untill the LCD is no longer busy
 177   1              send_char('s');//indicate the ARM the game starts now.
 178   1              screen_num=1;//change to screen_data.
 179   1      }
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/25/2019 01:44:18 PAGE 4   

 180          
 181          void Reset_isr() interrupt 1
 182          {
 183   1              game_timer = "00:00";
 184   1              miss_cnt=0;
 185   1              TI0 = 0;
 186   1              send_char('r'); //sending "Reset" to ARM.
 187   1              Init_LCD();
 188   1              KEPAD_INIT();   // initialize the keypad
 189   1              screen_num=0;
 190   1              recieved_note=0;
 191   1              cursor =0;
 192   1              Init_map();
 193   1              Main_loop();//#devnote: when will the interrupt end ? there is a bug !.
 194   1      }
 195          
 196          void screen_map_one()
 197          {
 198   1              char key=0; //used to read input from the user keyboard.
 199   1              LCD_BF();// wait untill the LCD is no longer busy
 200   1              LCD_CLRS(); // clears the display
 201   1              LCD_BF();// wait untill the LCD is no longer busy
 202   1              //---------> move cursor to right place
 203   1              if(cursor>15)
 204   1                      LCD_GOTO(cursor + 0x30);
 205   1              else
 206   1                      LCD_GOTO(cursor);
 207   1              LCD_BF();// wait untill the LCD is no longer busy
 208   1              print_map(2);
 209   1              while(1) // kind of a main loop
 210   1              {
 211   2                      key = GET_KEY();
 212   2                      LCD_BF();               //wait until releasing
 213   2                      if(key!=0) 
 214   2                      {
 215   3                              switch(key)
 216   3                              {
 217   4                              case 1://move cursor up. may chagnge the screen.
 218   4                                      if (cursor<=15)
 219   4                                      {
 220   5                                              screen_num=1;//change to screen_data.
 221   5                                              return;
 222   5                                      }
 223   4                                      cursor-=16;//go to upper line
 224   4                                      LCD_GOTO(cursor);
 225   4                                      break;
 226   4                              case 4://move cursor left.
 227   4                                      if (cursor==0 || cursor==16)//can't go behind the screeen.
 228   4                                              break;
 229   4                                      cursor--;
 230   4                                      LCD_BF();
 231   4                                      //------------>move left
 232   4                                      if(cursor>15)
 233   4                                              LCD_GOTO(cursor + 0x30);
 234   4                                      else
 235   4                                              LCD_GOTO(cursor);
 236   4                                      break;
 237   4                              case 5://move cursor down. may change screen.
 238   4                                      if (cursor>=16)
 239   4                                      {
 240   5                                              cursor-=16;
 241   5                                              screen_num=3;//go to bottom half of the map.
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/25/2019 01:44:18 PAGE 5   

 242   5                                              return;
 243   5                                      }
 244   4                                      cursor+=16;
 245   4                                      LCD_BF();
 246   4                                      LCD_GOTO(cursor + 0x30);
 247   4                                      break;
 248   4                              case 6://move cursor right.
 249   4                                      if (cursor==15 || cursor==31)//can't go behind the screeen.
 250   4                                              break;
 251   4                                      cursor++;
 252   4                                      LCD_BF();
 253   4                                      //------------>move right
 254   4                                      if(cursor>15)
 255   4                                              LCD_GOTO(cursor + 0x30);
 256   4                                      else
 257   4                                              LCD_GOTO(cursor);
 258   4                                      break;
 259   4                              }
 260   3                      }
 261   2                      key=0;
 262   2                      if(SW4 == 0)//if switch is pressed
 263   2                      {
 264   3                              send_char((char)cursor);//send to ARM the hit location.
 265   3                              wait_for_input();//wait for ARM to respond.
 266   3                              if(recieved_note == 'h')//if hit
 267   3                              {
 268   4                                      recieved_note=0;
 269   4                                      map[cursor/16][cursor%16] = 'X';
 270   4                                      //print 'X'
 271   4                              }
 272   3                              else if(recieved_note == 'm')//if miss
 273   3                              {
 274   4                                      recieved_note=0;
 275   4                                      map[cursor/16][cursor%16] = 'O';
 276   4                                      //print 'O'
 277   4                              }
 278   3                              else if(recieved_note == 'p')
 279   3                              {
 280   4                                      recieved_note=0;
 281   4                                      //#devnote:get 2 more locations and print the fallen ship
 282   4                              }
 283   3                      }
 284   2              }
 285   1              
 286   1      
 287   1      }
 288          //fill map with blank boxes.
 289          void Init_map()
 290          {
 291   1              int i=0;
 292   1              int j=0;
 293   1              for(j=0;j<4;j++)
 294   1              {
 295   2                      for(i=0;i<16;i++)
 296   2                      {
 297   3                              map[j][i]= 219;//219 represent unchecked box
 298   3                      }
 299   2              }       
 300   1              
 301   1      }
 302          //print the map by the right screen. 
 303          //screen 2 = upper half. 
C51 COMPILER V9.59.0.0   BATTLESHIPS                                                       06/25/2019 01:44:18 PAGE 6   

 304          //sceren 3 = bottom half.
 305          void print_map(int screen)
 306          {
 307   1              int i;
 308   1              if (screen==2 || screen==3)
 309   1              {
 310   2                      
 311   2                              for (i=0;i<16;i++)
 312   2                              {
 313   3                                      LCD_BF();
 314   3                                      LCD_DAT(map[(0+2*(screen/3))][i]);
 315   3                                      LCD_BF();
 316   3                              }
 317   2                              LCD_GOTO(0x40);
 318   2                              for (i=0;i<16;i++)
 319   2                              {
 320   3                                      LCD_BF();
 321   3                                      LCD_DAT(map[1+2*(screen/3)][i]);
 322   3                                      LCD_BF();
 323   3                              }
 324   2              }
 325   1      }
 326          
 327          
 328          void end() interrupt 0
 329          {
 330   1              wait_for_input();
 331   1              screen_end(recieved_note);
 332   1      }
 333          
 334          void screen_end(char win)
 335          {
 336   1              if (win=='w')
 337   1              {
 338   2                      //#devnote:ending winner screen.
 339   2                      //#devnote:request the player to hit "reset".
 340   2              }
 341   1              else if(win=='l')
 342   1              {
 343   2                      //#devnote:ending winner screen.
 344   2                      //#devnote:request the player to hit "reset".
 345   2              }
 346   1              else
 347   1              {
 348   2                      //#devnote: not sure. we can call screen_end again or raise screen_error and ask for a 'reset'.
 349   2              }
 350   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1117    ----
   CONSTANT SIZE    =     55    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     74       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
